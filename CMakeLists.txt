cmake_minimum_required(VERSION 3.15)
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
project(wamr_ext)
set(CMAKE_CXX_STANDARD 17)

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(PROJECT_BUILD_TYPE "Debug")
    set(CMAKE_CONFIGURATION_TYPES "Debug")
    add_definitions(-D_DEBUG -DDEBUG -D_DEBUG_)
    set(DEBUG 1)
else ()
    set(PROJECT_BUILD_TYPE "Release")
    set(CMAKE_CONFIGURATION_TYPES "Release;RelWithDebInfo;MinSizeRel")
    add_definitions(-DNDEBUG)
    set(DEBUG 0)
endif ()
message(STATUS "CMake build type: ${CMAKE_BUILD_TYPE}")
include(CheckSymbolExists)
include(CheckCXXSymbolExists)
include(CheckIncludeFile)
include(CheckLibraryExists)
include(CheckCCompilerFlag)
include(CheckCXXCompilerFlag)
set(WAMR_BUILD_TARGET "")
if (WIN32)
    while(TRUE)
        check_symbol_exists(_M_X64 "windows.h" WIN_X64)
        if (WIN_X64)
            set(PLATFORM_GUESS_ARCH x86_64)
            break()
        endif()
        check_symbol_exists(_M_ARM64 "windows.h" WIN_AARCH64)
        if (WIN_AARCH64)
            set(PLATFORM_GUESS_ARCH aarch64)
            break()
        endif()
        check_symbol_exists(_M_ARM "windows.h" WIN_ARM)
        if (WIN_ARM)
            set(PLATFORM_GUESS_ARCH armv7a)
            break()
        endif()
        set(PLATFORM_GUESS_ARCH i686)
        set(WAMR_BUILD_TARGET "X86_32")
        break()
    endwhile()
    add_definitions(-DWIN32 -D_UNICODE -DUNICODE -DWIN32_LEAN_AND_MEAN -DNOMINMAX)
    if (MSVC)
        set(PLATFORM ${PLATFORM_GUESS_ARCH}-windows-msvc)
        # Add /Zc:__cplusplus to correctly report __cplusplus
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zi /MP /utf-8 /Zc:__cplusplus")
        set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} /Zi /MP /utf-8")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /debug")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /debug")
        # Add some macros to reduce Windows API deprecation warnings
        add_definitions(-D_CRT_NON_CONFORMING_WCSTOK -D_WINSOCK_DEPRECATED_NO_WARNINGS)
    elseif(MINGW)
        # Target to Windows 7 or above
        add_definitions(-D_WIN32_WINNT=0x0601 -D__MINGW_USE_VC2005_COMPAT)
        link_libraries(pthread)
        set(PLATFORM ${PLATFORM_GUESS_ARCH}-w64-mingw32)
        set(STATIC_LINK 1)
    endif ()
else()
    # Guess platform by some predefined macro
    # Check libc or system
    while(TRUE)
        check_symbol_exists(__linux__ "stdlib.h" LINUX)
        check_symbol_exists(__APPLE__ "stdlib.h" APPLE)
        if (APPLE)
            link_libraries("-framework Foundation" "-framework CoreFoundation" resolv)
            break()
        endif()
        check_symbol_exists(__ANDROID__ "stdlib.h" ANDROID)
        if (ANDROID)
            set(PLATFORM_GUESS_SUFFIX android)
            break()
        endif()
        check_symbol_exists(__FreeBSD__ "stdlib.h" FREEBSD)
        if (FREEBSD)
            break()
        endif()
        check_symbol_exists(__GLIBC__ "stdlib.h" GLIBC)
        if (GLIBC)
            set(PLATFORM_GUESS_SUFFIX gnu)
            break()
        endif()
        # There is no __MUSL__ macro
        set(STATIC_LINK 1)
        set(PLATFORM_GUESS_SUFFIX musl)
        break()
    endwhile()
    # Check architecture
    while(TRUE)
        check_symbol_exists(__MIPSEL__ "stdlib.h" ARCH_MIPSEL)
        if (ARCH_MIPSEL)
            set(PLATFORM_GUESS_ARCH mipsel)
            set(PLATFORM_GUESS_SUFFIX ${PLATFORM_GUESS_SUFFIX}sf)
            break()
        endif()
        check_symbol_exists(__ARMEL__ "stdlib.h" ARCH_ARM)
        if (ARCH_ARM)
            set(PLATFORM_GUESS_ARCH arm)
            check_symbol_exists(__ARM_ARCH_7A__ "stdlib.h" ARCH_ARMV7A)
            if (ARCH_ARMV7A)
                set(PLATFORM_GUESS_ARCH armv7a)
            endif()
            set(PLATFORM_GUESS_SUFFIX ${PLATFORM_GUESS_SUFFIX}eabi)
            if (NOT ANDROID)
                # Hard float by default
                set(PLATFORM_GUESS_SUFFIX ${PLATFORM_GUESS_SUFFIX}hf)
            else()
                set(PLATFORM_GUESS_SUFFIX ${PLATFORM_GUESS_SUFFIX}16)
            endif()
            break()
        endif()
        check_symbol_exists(__AARCH64EL__ "stdlib.h" ARCH_AARCH64)
        if (ARCH_AARCH64)
            set(PLATFORM_GUESS_ARCH aarch64)
            if (ANDROID)
                set(PLATFORM_GUESS_SUFFIX ${PLATFORM_GUESS_SUFFIX}21)
            endif()
            break()
        endif()
        check_symbol_exists(__i386__ "stdlib.h" ARCH_X86)
        if (ARCH_X86)
            set(PLATFORM_GUESS_ARCH i686)
            set(WAMR_BUILD_TARGET "X86_32")
            if (ANDROID)
                set(PLATFORM_GUESS_SUFFIX ${PLATFORM_GUESS_SUFFIX}16)
            endif()
            break()
        endif()
        check_symbol_exists(__x86_64__ "stdlib.h" ARCH_X86_64)
        if (ARCH_X86_64)
            set(PLATFORM_GUESS_ARCH x86_64)
            if (ANDROID)
                set(PLATFORM_GUESS_SUFFIX ${PLATFORM_GUESS_SUFFIX}21)
            endif()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=core2")
            set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -march=core2")
            break()
        endif()
        break()
    endwhile()
    if (PLATFORM_GUESS_ARCH)
        if (APPLE)
            set(PLATFORM ${PLATFORM_GUESS_ARCH}-apple-macosx)
        elseif (CYGWIN)
            set(PLATFORM ${PLATFORM_GUESS_ARCH}-pc-cygwin)
        elseif (FREEBSD)
            set(PLATFORM ${PLATFORM_GUESS_ARCH}-pc-freebsd12)
        else()
            set(PLATFORM ${PLATFORM_GUESS_ARCH}-linux-${PLATFORM_GUESS_SUFFIX})
        endif()
    else()
        message(FATAL_ERROR "Cannot guess platform")
    endif()
    link_libraries(m dl)
    check_library_exists(rt shm_open "" HAVE_LIBRT)
    if (HAVE_LIBRT)
        link_libraries(rt)
    endif()
    add_link_options(-pthread)
    check_cxx_symbol_exists(__GLIBCXX__ "string" GLIBCXX)
    if (GLIBCXX)
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -static-libstdc++")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libstdc++")
    endif()
    if (NOT APPLE AND (ARCH_MIPSEL OR ARCH_X86))
        if (STATIC_LINK)
            # Avoid generating -Bdynamic linker flag for static build
            link_libraries(atomic)
        else()
            link_libraries(atomic.a)
        endif()
    endif()
endif()
# Allow some flags to be add to clang-cl(Clang with MSVC-like command-line)
if (NOT MSVC OR NOT CMAKE_C_COMPILER_ID MATCHES "MSVC")
    macro(append_flags_if condition flags)
        if(${condition})
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${flags}")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flags}")
        endif()
    endmacro()
    macro(append_cxx_flags_if condition flags)
        if(${condition})
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flags}")
        endif()
    endmacro()
    if (NOT MSVC)
        append_flags_if(TRUE "-g -funwind-tables -fasynchronous-unwind-tables -fvisibility=hidden")
        append_cxx_flags_if(TRUE "-fpermissive -fexceptions -frtti")
    endif()
    if (NOT WIN32)
        append_flags_if(TRUE -fPIC)
    endif()
    # Treat some warnings as error
    append_flags_if(TRUE "-Wno-unused-result -Wno-comment -Werror=return-type -Wformat -Wformat-security -Werror=format-security")
    if (NOT MSVC)
        append_cxx_flags_if(TRUE "-Werror=invalid-offsetof")
    endif()
    # Add some optional flags
    check_cxx_compiler_flag(-Werror=dynamic-class-memaccess FLAG_WERROR_DYNAMIC_CLASS_MEMACCESS)
    append_cxx_flags_if(FLAG_WERROR_DYNAMIC_CLASS_MEMACCESS -Werror=dynamic-class-memaccess)
    check_c_compiler_flag(-Werror=memset-transposed-args FLAG_WERROR_MEMSET_TRANSPOSED_ARGS)
    append_flags_if(FLAG_WERROR_MEMSET_TRANSPOSED_ARGS -Werror=memset-transposed-args)
    check_c_compiler_flag(-Wno-switch FLAG_WNO_SWITCH)
    append_flags_if(FLAG_WNO_SWITCH -Wno-switch)
    check_c_compiler_flag(-Werror=self-assign-field FLAG_WERROR_SELF_ASSIGN_FIELD)
    append_flags_if(FLAG_WERROR_SELF_ASSIGN_FIELD -Werror=self-assign-field)
    if (NOT MSVC)
        append_flags_if(TRUE -ffunction-sections -fdata-sections)
        if (NOT APPLE)
            set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--gc-sections")
            set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--gc-sections")
        endif()
    endif()
endif ()

set(WAMR_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/wasm-micro-runtime)
if (LINUX)
    set(WAMR_BUILD_PLATFORM "linux")
endif()
if (NOT WAMR_BUILD_TARGET)
    string(TOUPPER ${PLATFORM_GUESS_ARCH} WAMR_BUILD_TARGET)
endif()
set(WAMR_BUILD_INTERP 1)
set(WAMR_BUILD_FAST_INTERP 1)
set(WAMR_BUILD_LIBC_BUILTIN 1)
set(WAMR_BUILD_LIBC_WASI 1)
set(WAMR_BUILD_LIB_PTHREAD 1)
set(WAMR_BUILD_DUMP_CALL_STACK 1)
include(${WAMR_ROOT_DIR}/build-scripts/runtime_lib.cmake)
add_library(wamr STATIC ${WAMR_RUNTIME_LIB_SOURCE})

set(WAMR_EXT_INCLUDE_DIRS
        ${WAMR_ROOT_DIR}/core/iwasm/libraries)

add_library(wamr_ext STATIC
        src/base/Utility.cpp
        src/wamr_ext_lib/PthreadExt.cpp)
target_include_directories(wamr_ext PRIVATE ${WAMR_EXT_INCLUDE_DIRS})

add_library(wamr_ext_static STATIC
        $<TARGET_OBJECTS:wamr_ext>
        src/wamr_ext_api/wamr_ext_api.cpp
        )
target_include_directories(wamr_ext_static PRIVATE include ${WAMR_EXT_INCLUDE_DIRS})
target_compile_definitions(wamr_ext_static PRIVATE -DWAMR_EXT_STATIC_LIB)
